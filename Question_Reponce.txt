2 - Stratégie gloutonne{
    Proposer et implémenter en Python une stratégie gloutonne afin de résoudre ce problème.
    Cette fonction retournera le montant accumulé à l’issue du parcours, ainsi qu’une liste constituée des indices des emplacements visités.
    Cette stratégie est-elle optimale ? On justifiera sa réponse en proposant une démonstration ou un contre-exemple selon la réponse apportée.
},{
    Rappel Glouton = prendre le chemin optimal localement (mais pas reflechir a la suite)

    FONCTION Glouton(T, C, A, B):
        score ← 0
        symbole_precedent ← AUCUN
        chemin ← liste vide

        POUR i allant de 0 à longueur(T) - 1:   pour chaque tour de jeu
            symbole_actuel ← C[i]
            valeur ← T[i]

            SI symbole_precedent ≠ AUCUN ET symbole_actuel = symbole_precedent:    calculer le score theorique
                gain ← A × valeur
            SINON:
                gain ← B × valeur

            SI gain > 0:                 si visiter nous fait gagner au score alors on visite
                score ← score + gain
                symbole_precedent ← symbole_actuel
                ajouter i à chemin

        RETOURNER (score, chemin)

    Ce jeu repose en grande partie sur l’anticipation : 
    il peut être judicieux de perdre quelques points au départ pour ensuite enchaîner des gains bien plus importants grâce à des multiplicateurs favorables.
    La stratégie gloutonne, qui ne considère que le gain immédiat, est donc sous-optimale dans ce type de situation.
    T = [5, 5, 5, 5, 5, 5]  C = [1, 1, 1, 1, 1, 1]  A = 5  B = -1
    Cet exemple volontairement simplifié montre une situation où le joueur a tout intérêt à visiter tous les emplacements :
        Premier tour : on perd 5 × -1 = -5
        Puis à chaque tour suivant : on gagne 5 × 5 = 25
        Score total :
        -5 + 25 + 25 + 25 + 25 + 25 = 120
        
    Pourtant, le glouton raisonne ainsi :
        “Visiter l’emplacement 0 me fait perdre 5 points”
        “Je préfère ne rien faire”
    Résultat : il passe toutes les cases et termine avec un score de 0 au lieu de 120.
    Ce contre-exemple prouve que la stratégie gloutonne n’est pas fiable dans ce contexte.
}



3 - Récurrence et récursivité naïve{
    Soit n le nombre d'emplacements. 
    Pour 0≤i≤n−1 on définit V[i] comme étant la somme maximale que l’on peut collecter entres les emplacements d’indices i et n−1(inclus).
    Établir une formule de récurrence portant sur V[i].Justifier précisément son raisonnement.
},{
    on rappel un algo naif(ou brute force) cherche toutes les possibiliter
    dans ce jeux a chaque tour on a le choix de visiter un emplacement(True) ou de le passée(False)
    comme on execute toute les possibiliter pour voir le score maximal on as pas besoin de refflechir au symbole
    comme on utilisera la recurtion le plus simple est d'iterré sur chaque tour

    T[i] = gain brut sur la case i
    C[i] = symbole de la case i
    A et B = multiplicateurs selon le symbole précédent
    V[i] = gain max possible depuis la case i
    prev = le symbole de la dernière case visitée (ou None si aucune)

    FONCTION BruteForce(path):
        SI longueur(path) == longueur(T):     si la partie est finie
            score ← CalculerScore(path)       on joue la partie pour r'avoir le score
            RETOURNER (score, path)           on retourne le score et les choix effectuer

        Cas 1 : On visite cet emplacement
        (scoreTrue, pathTrue) ← BruteForce(path + [True])

        Cas 2 : On saute cet emplacement
        (scoreFalse, pathFalse) ← BruteForce(path + [False])

        // On garde le meilleur des deux
        SI scoreTrue > scoreFalse ALORS
            RETOURNER (scoreTrue, pathTrue)
        SINON
            RETOURNER (scoreFalse, pathFalse)


    (scoreMax, cheminOptimal) ← BruteForce([]) 1er iterration
    AFFICHER "Score max :", scoreMax
    AFFICHER "Chemin optimal :", cheminOptimal

    donc la formule devrai etre:
        V(i, s) = max(
            V(i + 1, s)       ,on saute la case i,la prochaine occurence
            
            (                 ,et on visite la case i  
            si C[i] = s       ,même symbole
                A × T[i]
            sinon             ,symbole different 
                B × T[i] 
            ) + V(i + 1, C[i]) la prochaine occurence
        )

        en condencer,
        V(i, s) = max(
            V(i + 1, s),                                      
            (A × T[i] si C[i] = s sinon B × T[i])  +  V(i + 1, C[i])
        )

        comme on cherche a calculer tout les score possible
        alors on as 2 possibiliter par emplacement n donc 
        2^n possibiliter tester ce qui correspond a une complexiter exponenciel
}

4.1 - Approche Top Down{

}

4.2 - Approche Bottom Up{

}